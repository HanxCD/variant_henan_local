package com.boco.soap.variant.henan.local.ims.agcf;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.boco.soap.check.standvalue.valueinvoke.impl.VariantValueInvoke;
import com.boco.soap.common.pojo.INeElement;
import com.boco.soap.common.pojo.solution.IInstructionParameter;

/**
 * @ClassName:  CALLING_NUMBER_AREA
 * @Description:TODO(这里用一句话描述这个类的作用)
 * @author: soap
 * @date:   2017年11月1日 上午9:57:38
 * @version: V1.0
 * @Copyright: 2017 www.boco.com.cn Inc. All rights reserved.
 */
public class CALLING_NUMBER_AREA extends VariantValueInvoke {

    private final Map<String, String> areacodeMap = new HashMap<String, String>();
    private Set<String> ignoreWhiteSet = new HashSet<String>();

    @Override
    public String[] getValues(INeElement arg0, IInstructionParameter arg1, Map<String, ?> data, String arg3) {

        //是否允许外呼
        String ALLOW_OUTBOUND = data.get("ALLOW_OUTBOUND").toString();
        if (ALLOW_OUTBOUND.equals("否") || (data.get("WHITE_LIST").toString().length() > 10)) {
            return null;
        }
        if (this.areacodeMap.size() == 0) {
            this.init();
            //this.initIgnoreSet();
        }
        /*if (this.ignoreWhiteSet.contains(data.get("WHITE_LIST").toString().trim())) {
            return null;
        }*/
        return new String[] { "0" + this.areacodeMap.get(data.get("BUSI_CITY").toString()) + data.get("WHITE_LIST").toString() };
    }

    private void init() {
        this.areacodeMap.put("商丘", "370");
        this.areacodeMap.put("郑州", "371");
        this.areacodeMap.put("安阳", "372");
        this.areacodeMap.put("新乡", "373");
        this.areacodeMap.put("许昌", "374");
        this.areacodeMap.put("平顶山", "375");
        this.areacodeMap.put("潢川", "376");
        this.areacodeMap.put("信阳", "376");
        this.areacodeMap.put("南阳", "377");
        this.areacodeMap.put("洛阳", "379");
        this.areacodeMap.put("焦作", "391");
        this.areacodeMap.put("鹤壁", "392");
        this.areacodeMap.put("濮阳", "393");
        this.areacodeMap.put("周口", "394");
        this.areacodeMap.put("漯河", "395");
        this.areacodeMap.put("驻马店", "396");
        this.areacodeMap.put("三门峡", "398");
        this.areacodeMap.put("济源", "391");
        this.areacodeMap.put("开封", "371");
    }

    private void initIgnoreSet() {
        String ignoreStr = "5692134,5698168,5653791,56981689,56537910,56537913,56537914,56537915,5692134,569785,56921341,56921342,56921343,56921344,56921345,56921346,56921347,56921348,56921349,7086000,3105800,3105779,3105789,6023222,310768,6119666,3105756,3105755,56981681,3105766,3105906,3105908,3105909,3105901,3105900,3105905,3105902,608638,68244744,6119555,12319,3105898,3105899,6023111,12121,3105809,3105818,3105888,3105889,3105859,3105858,5323091,3105866,3105868,6189269,6189239,6189238,310531,310530,6358742,6358743,6358744,6358745,6358740,6358741,6358739,6358736,6358735,6358738,6358737,6358733,6358734,6358731,6358732,6358730,6358729,6358728,6358727,6358726,6358725,6358724,6358720,6358721,6358722,6358723,6358714,6358713,6358716,6358715,6358718,6358717,6358719,6358711,6023000,6358712,6358710,6358705,6358704,6358703,6358702,6358709,6358708,6358707,6358706,6358701,6358700,3105986,3105989,3105988,3105996,6119888,3105999,3105938,3105935,3105936,3105933,3105934,6358769,3105939,3105955,3105956,3105959,3105957,3105958,6358759,6358757,6358758,3105952,6358762,6358761,6358760,6358767,6358766,6358765,3105966,3105969,6358746,6358747,6358748,3105960,6358756,6358755,5322321,569930,569933,569934,569931,569932,569935,6023789,6023777,569889,569888,3128873,3128875,3128876,5102660,6025899,569829,6358533,6358535,6358536,6023666,6358530,6358531,6358532,6358527,6358526,6358529,6358528,6358546,6358547,6358544,6358545,56995555,6358542,6358543,6358540,6358541,5223160,6358539,6358538,6358537,6358510,6358511,6358512,6358513,6358505,6358507,6358506,6358509,6358508,6023678,6358520,6358521,6358525,6358522,6358523,6358518,6358517,6358516,6358515,6358519,6358570,6358572,6358578,6358577,6358579,6358573,6358576,6358575,6358583,6358582,6358581,6358580,6358584,6358550,6358552,6358551,6358554,6358553,6358556,6358558,6358557,6358548,6358561,6358560,6358563,6358562,6358559,312813,6358501,6358500,6358503,6358502,5698280,5698281,5698282,5698283,5698285,5698284,5698287,5698286,5698289,5698288,569286,569285,569288,569287,569289,569280,569281,569284,569283,5698271,5698272,5698270,5698279,5698278,5226171,5698277,5698276,5698275,5698274,5698273,12349,6358591,6358590,6358599,6358597,6358598,6161263,6161262,3105921,217884,217883,217882,217881,217880,6358630,6358631,6358626,6358628,6358627,6358629,217878,217879,217875,217877,217876,56927777,6358655,6358656,6358657,6358650,6358651,6358652,6358653,6358660,6358661,6023555,6358659,6358658,6358673,6358672,6358671,6358670,6358682,6358681,569950,569951,569954,569955,569952,569953,569949,569948,5692820,5692823,5692821,5692822,2178999,602588,6358600,6358602,6358601,6358609,6358607,6358608,6358605,6358606,6358603,6358612,6358611,6358610,6358622,6358621,569896,3105600,3105606,569876,569875,3105616,3107595,3107596,3107599,3105666,3105665,3105668,3105669,217860,217861,217862,3105650,3105656,217859,217858,3105686,3105688,3105682,3105689,3105677,3105676,3105679,3105678,310592,310591,95585,3105698,3105696,3107588,3107585,3107587,3107586,3107580,6358328,6358329,6358330,6358336,6358335,6358338,6358337,6358332,6358331,6358333,6358339,6358306,6358307,6358308,6358309,6358310,6358312,6358311,6358316,6358315,6358319,6358317,6358318,6358323,6358322,6358321,6358320,6358327,6358326,6358325,6358305,6358302,6358303,6358300,6358301,56982777,7075660,7075661,5217179,7075667,7075666,7075669,7075668,7075663,7075662,7075665,7075664,6358399,6358398,6358396,6358395,6358394,6358393,6358392,6358391,6351000,6358390,6161061,6358360,6358361,3107699,6358362,6358363,3107696,6358368,6358369,6358365,6358366,6358367,3107690,3107691,6358351,6358352,6358350,6358359,6358357,6358358,6358355,6358356,6358353,6358354,6358380,6358381,6358382,3107678,6358383,6358384,6358385,6358386,6358387,6358388,6358389,6161020,6358373,6358371,6358372,6358377,6358378,6358375,6358376,6358379,3107668,3107666,3107651,56988800,96666,6358400,6358403,6358404,6358401,6358402,6358409,6358406,6358405,6358408,6358407,6358412,6358413,6358414,6358415,6358410,6358411,2178222,6358419,6358418,6358417,6358416,6358421,6358422,6358420,56982880,6139199,6139197,6139198,95598,56978,22216782,22216783,22216780,22216781,22216779,22216778,22216776,22216775,22216774,22216773,22216791,22216792,22216793,22216794,22216790,22216789,22216788,22216785,22216784,22216787,22216786,22216760,22216761,22216759,60652000,95518,22216754,22216753,22216752,22216751,22216758,22216757,22216756,22216755,22216770,22216771,22216772,22216763,22216762,22216765,22216764,22216767,22216766,22216769,22216768,22216735,22216736,22216733,22216734,22216731,22216732,22216730,22216739,22216737,22216738,22216750,22216744,22216745,22216746,22216747,22216740,22216741,22216742,22216743,22216748,22216749,22216713,22216714,22216711,22216712,22216717,22216718,22216715,22216716,22216719,22216721,22216722,22216723,22216724,22216725,22216726,22216727,22216728,22216729,22216709,22216708,22216707,22216706,22216705,22216704,22216703,22216702,22216701,51999,2789999,60875666,22216696,22216697,22216698,22216699,22216689,22216687,22216688,22216685,22216686,22216695,22216694,22216693,22216692,22216691,22216678,22216679,22216674,22216675,22216676,22216677,22216682,22216681,22216684,22216683,22216640,22216633,22216632,22216631,22216630,22216637,22216636,22216635,22216634,22216639,22216638,22216651,22216642,22216641,22216644,22216643,22216646,22216645,22216648,22216647,22216649,22216661,22216662,22216659,22216658,22216657,22216656,22216655,22216654,22216653,22216652,6087506,6087505,6087504,6087503,22216671,6087509,22216672,6087508,22216673,6087507,22216668,22216667,22216669,22216664,22216663,22216666,22216665,22216605,22216606,22216607,22216608,22216609,22216600,22216601,22216602,22216603,22216604,22216618,22216619,22216616,22216617,22216614,22216615,22216612,22216613,22216610,22216611,22216627,22216628,22216629,22216623,22216624,22216625,22216626,22216620,22216621,22216622,60877777,353,351,606521,606522,606523,606524,606525,22722514,22722521,22219999,22722510,22218888,22722524,22722526,22722532,60875499,2652,2650,2651,22216977,22216978,22216975,22216976,22216973,22216974,22216971,22216972,22216981,22216980,22216986,22216987,22216988,22216989,22216982,22216983,22216984,22216985,22216990,22216992,22216991,22216951,22216952,22216950,22216955,22216956,22216953,22216954,22216959,22216957,22216958,22216960,22216961,22216962,22216963,22216964,22216965,22216966,22216967,22216968,22216969,22216970,22216996,22216995,22216994,22216993,22216999,22216998,22216997,12315,22216900,22216901,22216908,22216909,22216906,22216907,22216904,22216905,22216902,22216903,22216939,22216936,22216935,22216938,22216937,22216932,22216931,22216934,22216933,22216930,22216949,22216948,22216947,22216946,22216945,22216944,22216943,22216942,22216941,22216940,22216914,22216913,22216916,22216915,22216918,22216917,22216919,22216910,22216912,22216911,22216927,22216926,22216925,22216924,22216929,22216928,22216923,22216922,22216921,22216920,22216,30314,22216838,22216839,22216836,22216837,22216830,22216831,22216834,22216835,22216832,22216833,60875777,22216847,22216848,22216849,22216840,22216841,22216842,22216843,22216844,22216845,22216846,22216858,22216859,22216856,22216857,22216854,22216855,22216852,22216853,22216850,22216851,22216860,22216869,22216865,22216866,22216867,22216868,22216861,22216862,22216863,22216864,22216871,22216870,22216875,22216874,22216873,22216872,22216879,22216878,22216877,22216876,22216881,22216882,22216880,22216884,22216883,22216886,22216885,22216888,22216887,22216889,22216890,22216891,22216892,22216893,22216899,22216898,22216897,22216896,22216895,22216894,60102777,2168333,602717,602716,602711,602710,602712,6065203,6065202,6065201,6065200,6065207,6065206,6065205,6065204,6065209,6065208,22216802,22216801,22216800,22216806,22216805,22216804,22216803,22216809,22216808,22216807,22216811,22216810,22216813,22216812,22216819,22216818,22216815,22216814,22216817,22216816,22216824,22216823,22216822,22216821,22216820,22216829,22216828,22216827,22216826,22216825,60862889,12329,602729,602738,602739,602736,602737,602735,602730,602731,602719,602718,602726,602727,602728,602721,602722,602723,602720,608754,608753,608752,608751,22216799,22216795,22216796,22216797,22216798,2859,2858,2857,63065194,63065195,63065192,63065193,63065190,63065191,63065199,63065198,63065197,63065196,63065181,63065182,63065183,63065184,63065180,63065189,63065186,63065185,63065188,63065187,63065151,63065150,63065158,63065159,63065156,63065157,63065154,63065152,63065153,63065140,63065145,63065146,63065147,63065148,63065141,63065142,63065143,63065144,63065149,63065173,63065172,63065171,63065170,63065176,63065177,63065174,63065175,63065178,63065179,63065160,63065163,63065164,63065165,63065166,63065167,63065168,63065169,66369,663689,63065110,63065114,63065115,63065112,63065113,63065118,63065119,63065116,63065117,63065100,63065101,63065102,63065103,63065104,63065105,63065106,63065107,63065108,63065109,63065136,63065137,63065134,63065135,63065132,63065133,63065130,63065131,63065138,63065139,63065123,63065124,63065125,63065126,63065120,63065121,63065122,63065127,63065128,63065129";
        this.ignoreWhiteSet = new HashSet<String>(Arrays.asList(ignoreStr.split(",")));
    }
}
